import logger from "./logger.js";
import { refreshAccessToken } from "./lib/microsoft-auth.js";
class GraphClient {
  constructor(authManager) {
    this.accessToken = null;
    this.refreshToken = null;
    this.authManager = authManager;
  }
  setOAuthTokens(accessToken, refreshToken) {
    this.accessToken = accessToken;
    this.refreshToken = refreshToken || null;
  }
  async makeRequest(endpoint, options = {}) {
    let accessToken = options.accessToken || this.accessToken || await this.authManager.getToken();
    let refreshToken = options.refreshToken || this.refreshToken;
    if (!accessToken) {
      throw new Error("No access token available");
    }
    try {
      const response = await this.performRequest(endpoint, accessToken, options);
      if (response.status === 401 && refreshToken) {
        await this.refreshAccessToken(refreshToken);
        accessToken = this.accessToken || accessToken;
        if (!accessToken) {
          throw new Error("Failed to refresh access token");
        }
        return this.performRequest(endpoint, accessToken, options);
      }
      if (response.status === 403) {
        const errorText = await response.text();
        if (errorText.includes("scope") || errorText.includes("permission")) {
          throw new Error(
            `Microsoft Graph API scope error: ${response.status} ${response.statusText} - ${errorText}. This tool requires organization mode. Please restart with --org-mode flag.`
          );
        }
        throw new Error(
          `Microsoft Graph API error: ${response.status} ${response.statusText} - ${errorText}`
        );
      }
      if (!response.ok) {
        throw new Error(
          `Microsoft Graph API error: ${response.status} ${response.statusText} - ${await response.text()}`
        );
      }
      const text = await response.text();
      if (text === "") {
        return { message: "OK!" };
      }
      try {
        return JSON.parse(text);
      } catch {
        return { message: "OK!", rawResponse: text };
      }
    } catch (error) {
      logger.error("Microsoft Graph API request failed:", error);
      throw error;
    }
  }
  async refreshAccessToken(refreshToken) {
    const tenantId = process.env.MS365_MCP_TENANT_ID || "common";
    const clientId = process.env.MS365_MCP_CLIENT_ID || "084a3e9f-a9f4-43f7-89f9-d229cf97853e";
    const clientSecret = process.env.MS365_MCP_CLIENT_SECRET;
    if (!clientSecret) {
      throw new Error("MS365_MCP_CLIENT_SECRET not configured");
    }
    const response = await refreshAccessToken(refreshToken, clientId, clientSecret, tenantId);
    this.accessToken = response.access_token;
    if (response.refresh_token) {
      this.refreshToken = response.refresh_token;
    }
  }
  async performRequest(endpoint, accessToken, options) {
    const url = `https://graph.microsoft.com/v1.0${endpoint}`;
    const headers = {
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json",
      ...options.headers
    };
    return fetch(url, {
      method: options.method || "GET",
      headers,
      body: options.body
    });
  }
  async graphRequest(endpoint, options = {}) {
    try {
      logger.info(`Calling ${endpoint} with options: ${JSON.stringify(options)}`);
      const result = await this.makeRequest(endpoint, options);
      return this.formatJsonResponse(result, options.rawResponse);
    } catch (error) {
      logger.error(`Error in Graph API request: ${error}`);
      return {
        content: [{ type: "text", text: JSON.stringify({ error: error.message }) }],
        isError: true
      };
    }
  }
  formatJsonResponse(data, rawResponse = false) {
    if (rawResponse) {
      return {
        content: [{ type: "text", text: JSON.stringify(data) }]
      };
    }
    if (data === null || data === void 0) {
      return {
        content: [{ type: "text", text: JSON.stringify({ success: true }) }]
      };
    }
    const removeODataProps = (obj) => {
      if (typeof obj === "object" && obj !== null) {
        Object.keys(obj).forEach((key) => {
          if (key.startsWith("@odata.")) {
            delete obj[key];
          } else if (typeof obj[key] === "object") {
            removeODataProps(obj[key]);
          }
        });
      }
    };
    removeODataProps(data);
    return {
      content: [{ type: "text", text: JSON.stringify(data, null, 2) }]
    };
  }
}
var graph_client_default = GraphClient;
export {
  graph_client_default as default
};
